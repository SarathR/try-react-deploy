{"version":3,"sources":["Square.js","Board.js","util.js","Game.js","AppMenu.js","ReactAsync.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","rows","Array","fill","i","key","this","squares","row","map","x","col","renderSquare","rowIndex","renderRow","React","Component","calculateWinner","lines","length","a","b","c","Game","state","history","stepNumber","xIsNext","slice","setState","concat","step","current","winner","moves","move","desc","jumpTo","status","handleClick","AppMenu","useState","anchorEl","setAnchorEl","handleClose","item","event","Button","aria-controls","aria-haspopup","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","to","ReactAsync","App","path","component","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c5eb1801.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = (props) => {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}  >\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;","import Square from './Square';\r\nimport React from 'react';\r\n\r\nexport default class Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.rows = Array(3).fill(null);\r\n  }\r\n  renderSquare(i) {\r\n    return (<Square\r\n      key={i} \r\n      value={this.props.squares[i]}\r\n      onClick={() => this.props.onClick(i)}\r\n    />);\r\n  }\r\n  renderRow(row) {\r\n    return (\r\n      <div key={row} className=\"board-row\">\r\n        {this.rows.map((x, col) => this.renderSquare(3*row+col))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.rows.map((x, rowIndex) => this.renderRow(rowIndex))}\r\n      </div>\r\n    );\r\n  }\r\n}","export default function calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}","import React from 'react';\r\nimport Board from './Board';\r\nimport './index.css';\r\nimport calculateWinner from './util.js';  \r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i){\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if(calculateWinner(squares)  || squares[i]) return;\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    \r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? `Goto move # ${move}` : 'Goto to game start';\r\n      return (\r\n      <li key={move}><button onClick={() => this.jumpTo(move)}>{desc}</button></li>\r\n      )\r\n    });\r\n\r\n    const status = winner ? `Winner: ${winner}` :\r\n      `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Game;","import React from 'react';\r\nimport {Button, Menu, MenuItem}  from '@material-ui/core';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst AppMenu = () => {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = item => (event) => {\r\n    setAnchorEl(null);\r\n  };\r\n  return (\r\n  <>\r\n    <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\r\n      Pages Menu\r\n    </Button>\r\n    <Menu\r\n      id=\"simple-menu\"\r\n      anchorEl={anchorEl}\r\n      keepMounted\r\n      open={Boolean(anchorEl)}\r\n      onClose={handleClose}\r\n    >\r\n      <MenuItem onClick={handleClose()}><Link to='/game'>Game</Link></MenuItem>\r\n      <MenuItem onClick={handleClose()}><Link to='/reactAsync'>React</Link></MenuItem>\r\n    </Menu>\r\n  </>\r\n  );\r\n}\r\n\r\nexport default AppMenu;","import React from 'react';\r\n\r\nconst ReactAsync = (props) => {\r\n  return (\r\n    <div>This is a test</div>\r\n  );\r\n}\r\n\r\nexport default ReactAsync;","import React from 'react';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport Game from './Game';\r\nimport AppMenu from './AppMenu';\r\nimport ReactAsync from './ReactAsync';\r\n\r\nconst App = () => {\r\n  return(\r\n    <Router>\r\n        <AppMenu/>\r\n        <Route path=\"/game\" component={Game} />\r\n        <Route path=\"/reactAsync\" component={ReactAsync} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}